version: "3.7"

services:
  app:
    build: .
    command: sh -c "poetry run gunicorn -c gunicorn.py main.wsgi"
    expose:
      - 8000
    depends_on:
      migration:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
    volumes:
      - .:/usr/src/app/
    restart: unless-stopped


  migration:
    build:
      context: .
    depends_on:
      postgres:
        condition: service_healthy
    entrypoint: |
      sh -c "
      poetry run python manage.py migrate &&
      poetry run python manage.py loaddata fixtures/users.json"

  postgres:
    image: postgres:15
    env_file:
      - .env
    environment:
      POSTGRES_USER: $POSTGRES_USER
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
      POSTGRES_DB: $POSTGRES_DB
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB" ]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data

  nginx:
    image: nginx:1.23.1
    platform: linux/arm64
    restart: always
    volumes:
      - ./nginx/conf.d/:/etc/nginx/conf.d/
      - django_static:/usr/share/nginx/html/static/
    ports:
      - "80:80"
    depends_on:
      app:
        condition: service_started
      collect_static:
        condition: service_completed_successfully

  redis:
    image: redis
    restart: always
    ports:
      - "6379:6379"



  collect_static:
    build: .
    entrypoint: ""
    volumes:
      - django_static:/usr/src/app/static/
    command: sh -c "poetry run python manage.py collectstatic -c --no-input"



volumes:
  postgres_data:
  django_static:
